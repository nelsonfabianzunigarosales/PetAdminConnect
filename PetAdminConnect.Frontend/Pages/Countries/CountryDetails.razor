@page "/countries/details/{CountryId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if (country is null)
{
    <Loading />
}
else
{
    <h3>@country.Name</h3>
    <div class="mb-2" style="display: flex; flex-wrap:wrap;">
        <div class="mx-2">
            <a class="btn btn-success" href="/countries">Regresar</a>
            <span></span>
            <a class="btn btn-primary" @onclick=@(() => ShowModal())><i class="oi oi-plus"></i> Adicionar Estado/Departamento</a>
        </div>
        <div class="mx-2">
            <FilterComponent EntityName="Estado/Departamento"
                             OnFilterChanged="HandleFilterChanged"
                             LoadAsyncParameter="LoadAsync" />
        </div>
    </div>

    <h4>Estados/Departamentos</h4>

    <Pagination CurrentPage="currentPage"
                TotalPages="totalPages"
                SelectedPage="SelectedPageAsync" />

    <GenericList MyList="states!">
        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Estado / Departamento</th>
                        <th style="width:90px">Ciudades</th>
                        <th style="width:210px"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var state in states!)
                    {
                        <tr>
                            <td><a href="/states/details/@state.Id">@state.Name</a></td>
                            <td>
                                @state.CitiesNumber
                            </td>
                            <td>
                                <a class="btn btn-warning btn-sm" @onclick=@(() => ShowModal(state.Id, true))><i class="oi oi-pencil" />Editar</a>
                                <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(state))><i class="oi oi-trash" />Borrar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </GenericList>
}

@code {
    private Country? country;
    private List<State>? states;
    private int currentPage = 1;
    private int totalPages;
    private string filter = string.Empty;

    [Parameter]
    public int CountryId { get; set; }
    
    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task ShowModal(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;

        if (isEdit)
        {
            modalReference = Modal.Show<StateEdit>(string.Empty, new ModalParameters().Add("StateId", id));
        }
        else
        {
            modalReference = Modal.Show<StateCreate>();
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        var ok = await LoadCountryAsync();
        if (ok)
        {
            ok = await LoadStatesAsync(page);
            if (ok)
            {
                await LoadPagesAsync();
            }
        }
    }

    private async Task LoadPagesAsync()
    {
        var response = await repository.GetAsync<int>($"/api/states/totalPages?id={CountryId}");
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        totalPages = response.Response;
    }

    private async Task<bool> LoadStatesAsync(int page)
    {
        var url = $"/api/states?id={CountryId}&page={page}";
        if (!string.IsNullOrEmpty(filter))
        {
            url += $"&filter={filter}";
        }
        var response = await repository.GetAsync<List<State>>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }
        states = response.Response;
        return true;
    }

    private async Task<bool> LoadCountryAsync()
    {
        var response = await repository.GetAsync<Country>($"/api/countries/{CountryId}");
        if (response.Error)
        {
            if (response.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries");
                return false;
            }

            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }
        country = response.Response;
        return true;
    }

    private async Task HandleFilterChanged(string newFilter)
    {
        filter = newFilter; // Actualizar el filtro en el componente Countries
        currentPage = 1;
        await LoadAsync(); // Recargar la lista con el nuevo filtro
        await SelectedPageAsync(currentPage); // Mantener la página actual después de cambiar el filtro
    }

    private string GetNewEntityUrl(Country country)
    {
        return $"/states/create/{country.Id}";
    }

    private async Task DeleteAsync(State state)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Realmente deseas eliminar el departamento/estado? {state.Name}",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.DeleteAsync($"/api/states/{state.Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro borrado con éxito.");
    }
}