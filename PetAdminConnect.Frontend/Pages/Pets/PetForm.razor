@inject SweetAlertService sweetAlertService
@inject IRepository repository

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigationAsync"></NavigationLock>
@if (loading)
{
    <Loading />
}
else
{
    <EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
        <div class="card">
            <div class="card-header">
                <i class="oi oi-person" /> Registrar nueva mascota
                <button class="btn btn-sm btn-success float-end" type="submit">
                    <i class="oi oi-check" /> Registrar
                </button>
                <button class="btn btn-sm btn-primary float-end" type="submit" @onclick="ReturnAction">
                    <i class="oi oi-arrow-left" /> Regresar
                </button>
            </div>
            <div class="card-body">
                <div class="container">
                    <div class="row">
                        <div class="col-md-3 align-content-center">
                            <InputImg Label="Foto" ImageSelected="ImageSelected" ImageURL="@imageUrl" />
                        </div>
                        <div class="col-md-9">
                            <form>
                                <div class="row mb-2">
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="petName" class="form-label">Nombre</label>
                                            <InputText @bind-Value="PetDTO.Name" class="form-control" />
                                            <ValidationMessage For="@(() => PetDTO.Name)" />
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="petBreed" class="form-label">Especie</label>
                                            <select class="form-select" @onchange="SpecieChangedAsync">
                                                <option value="0">-- Seleccione una especie --</option>
                                                @if (species is not null)
                                                { @foreach (var specie in species)
                                                    {
                                                        <option value="@specie.Id">@specie.Name</option>
                                                    }
                                                }
                                            </select>
                                            <ValidationMessage For="@(() => PetDTO.SpecieId)" />
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="petBreed" class="form-label">Raza</label>
                                            <select class="form-select" @onchange="BreedChangedAsync">
                                                <option value="-1">-- Seleccione una raza --</option>
                                                @if (breeds is not null)
                                                { @foreach (var breed in breeds)
                                                    {
                                                        <option value="@breed.Id">@breed.Name</option>
                                                    } }
                                            </select>
                                            <ValidationMessage For="@(() => PetDTO.BreedId)" />
                                        </div>
                                    </div>
                                </div>

                                <!-- Tercera fila -->
                                <div class="row mb-3">
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="petGender" class="form-label">Género</label>
                                            <select class="form-select"
                                                    id="petGender"
                                            @bind="PetDTO.GenderType">
                                                <option value="-1">-- Seleccione un género --</option>
                                                @foreach (var gender in
                                               SharedEnums.GenderTypeName)
                                                {
                                                    <option value="@gender.Key">@gender.Value</option>
                                                }
                                            </select>
                                        </div>
                                    </div>

                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="petAge" class="form-label">Edad</label>
                                            <InputNumber id="petAge"
                                            @bind-Value="PetDTO.Age"
                                                         class="form-control" />
                                            <ValidationMessage For="@(() => PetDTO.Age)" />
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="petSize" class="form-label">Tamaño</label>
                                            <select class="form-select"
                                                    id="petSize"
                                            @bind="PetDTO.SizeType">
                                                <option value="0">-- Seleccione una talla --</option>
                                                @foreach (var size in
                                               SharedEnums.SizeTypeName)
                                                {
                                                    <option value="@size.Key">@size.Value</option>
                                                }
                                            </select>
                                            <ValidationMessage For="@(() => PetDTO.SizeType)" />
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <DataAnnotationsValidator />        
    </EditForm>
}




@code {
    private EditContext editContext = null!;
    private List<Specie>? species;
    private List<Breed>? breeds;
    private string? imageUrl;
    private bool loading;

    protected override async Task OnInitializedAsync()
    {

        editContext = new(PetDTO);
        await LoadSpeciesAsync();

    }

    private void ImageSelected(string imagenBase64)
    {
        PetDTO.Photo = imagenBase64;
        imageUrl = null;
    }

    [EditorRequired]
    [Parameter]
    public PetDTO PetDTO { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    private async Task OnBeforeInternalNavigationAsync(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }

    private async Task LoadSpeciesAsync()
    {
        var responseHttp = await repository.GetAsync<List<Specie>>("/api/species/combo");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        species = responseHttp.Response!;
    }

    private async Task LoadBreedsAsync(int specieId)
    {
        var responseHttp = await repository.GetAsync<List<Breed>>($"/api/breeds/combo/{specieId}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        breeds = responseHttp.Response!;

    }

    private async Task SpecieChangedAsync(ChangeEventArgs e)
    {
        var selectedSpecie = Convert.ToInt32(e.Value!);
        await LoadBreedsAsync(selectedSpecie);       
        PetDTO.SpecieId = selectedSpecie;
    }

    private async Task BreedChangedAsync(ChangeEventArgs e)
    {
        var selectedBreed = Convert.ToInt32(e.Value!);
        await LoadBreedsAsync(selectedBreed);
        PetDTO.BreedId = selectedBreed;
    }

}
