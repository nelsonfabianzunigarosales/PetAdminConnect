@page "/client"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@inject AuthenticationStateProvider AuthenticationStateProvider


@if (client is null)
{
    <Loading />
}
else
{
    <div class="container">
        <ClientsInfoCard Client="@client" />
        <ClientsTabsCard Client="@client" />
    </div>
}

@code {
    private Client client = null!;
    private ClaimsPrincipal? user;

    public string UserId { get; set; }

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateTask;
        var claims = authenticationState.User.Claims.ToList();
        var userId = claims.FirstOrDefault(x => x.Type == "UserId");
        if (userId is not null)
        {
            UserId = userId.Value;
        }
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var ok = await LoadClientAsync();        
    }

    private async Task<bool> LoadClientAsync()
    {
        var response = await repository.GetAsync<Client>($"/api/clients/getclient/{UserId}");
        if (response.Error)
        {
            if (response.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
                return false;
            }

            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }
        client = response.Response!;
        return true;
    }
    
}