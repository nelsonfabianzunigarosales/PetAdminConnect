@page "/species"
@inject IRepository repository
@inject SweetAlertService sweetAlertService

<h3>Especies</h3>

<div class="mb-2" style="display: flex; flex-wrap:wrap;">
    <div class="mx-2">
        <a class="btn btn-primary float-end" @onclick=@(() => ShowModal())><i class="oi oi-plus"></i> Adicionar Especie</a>
        <span></span>
    </div>
    <div class="mx-2">
        <FilterComponent EntityName="Especie"
                         OnFilterChanged="HandleFilterChanged"
                         LoadAsyncParameter="LoadAsync" />
    </div>
</div>

<Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPageAsync" />

<GenericList MyList="species!">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Especie</th>
                    <th style="width:210px">Razas</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var specie in species!)
                {
                    <tr>
                        <td><a href="/species/details/@specie.Id">@specie.Name</a></td>
                        <td>@specie.BreedsNumber</td>
                        <td>
                            <a class="btn btn-warning btn-sm" @onclick=@(() => ShowModal(specie.Id, true))><i class="oi oi-pencil" />Editar</a>
                            <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(specie))><i class="oi oi-trash" />Borrar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {
    private List<Specie>? species;
    private int currentPage = 1;
    private int totalPages;
    private string filter = string.Empty;
    
    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task ShowModal(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;

        if (isEdit)
        {
            modalReference = Modal.Show<SpecieEdit>(string.Empty, new ModalParameters().Add("SpecieId", id));
        }
        else
        {
            modalReference = Modal.Show<SpecieCreate>();
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }

    private async Task LoadAsync(int page = 1)
    {
        var ok = await LoadListAsync(page);
        if (ok)
        {
            await LoadPagesAsync();
        }
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task<bool> LoadListAsync(int page)
    {
        var url = $"/api/species?page={page}";
        if (!string.IsNullOrEmpty(filter))
        {
            url += $"&filter={filter}";
        }

        var response = await repository.GetAsync<List<Specie>>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }

        species = response.Response;
        return true;
    }

    private async Task LoadPagesAsync()
    {
        var response = await repository.GetAsync<int>("/api/species/totalPages");
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        totalPages = response.Response;
    }

    private async Task HandleFilterChanged(string newFilter)
    {
        filter = newFilter; // Actualizar el filtro en el componente Countries
        currentPage = 1;
        await LoadAsync(); // Recargar la lista con el nuevo filtro
        await SelectedPageAsync(currentPage); // Mantener la página actual después de cambiar el filtro
    }

    private async Task DeleteAsync(Specie specie)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Esta seguro que quieres borrar la especie: {specie.Name}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        
        if (confirm)
        {
            return;
        }

        var response = await repository.DeleteAsync($"/api/species/{specie.Id}");
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await LoadAsync();

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro borrado con éxito.");
    }

}
