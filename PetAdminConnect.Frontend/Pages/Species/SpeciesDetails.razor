@page "/species/details/{SpecieId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if (specie is null)
{
    <Loading />
}
else
{
    <h3>@specie.Name</h3>
    <div class="mb-2">
        <a class="btn btn-primary" href="/breeds/create/@specie.Id">Nueva Raza</a>
        <a class="btn btn-success" href="/species">Regresar</a>
    </div>

    <h4>Razas</h4>

    <Pagination CurrentPage="currentPage"
                TotalPages="totalPages"
                SelectedPage="SelectedPageAsync" />

    <GenericList MyList="breeds!">
        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Raza</th>
                        <th style="width:210px"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var breed in breeds!)
                    {
                        <tr>
                            <td>@breed.Name</td>
                            <td>
                                <a class="btn btn-warning btn-sm" href="/breeds/edit/@breed.Id">Editar</a>
                                <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(breed))>Borrar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </GenericList>
}

@code {
    private Specie? specie;
    private List<Breed>? breeds;
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    public int SpecieId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        var ok = await LoadSpecieAsync();
        
        if (ok)
        {
            ok = await LoadBreedsAsync(page);

            if (ok)
            {
                await LoadPagesAsync();                
            }
        }
    }

    private async Task LoadPagesAsync()
    {
        var response = await repository.GetAsync<int>($"/api/breeds/totalPages?id={SpecieId}");
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        totalPages = response.Response;
    }

    private async Task<bool> LoadBreedsAsync(int page)
    {
        var response = await repository.GetAsync<List<Breed>>($"/api/breeds?id={SpecieId}&page={page}");
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }
        breeds = response.Response;
        return true;
    }

    private async Task<bool> LoadSpecieAsync()
    {
        var response = await repository.GetAsync<Specie>($"/api/species/{SpecieId}");
        if (response.Error)
        {
            if (response.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/species");
                return false;
            }

            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }
        specie = response.Response;
        return true;
    }

    private async Task DeleteAsync(Breed breed)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Esta seguro que quieres borrar la raza: {breed.Name}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var response = await repository.DeleteAsync($"/api/breeds/{breed.Id}");
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await LoadAsync();

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro borrado con éxito.");
    }
}
