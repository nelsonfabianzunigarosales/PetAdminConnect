<div>
    @if (imageBase64 is not null)
    {
        <div class="mb-1">
            <div class="text-center">
                <img src="data:image/jpeg;base64, @imageBase64" class="img-fluid rounded-circle" style="max-width: @MaxWithImg%;" />
            </div>
        </div>
    }

    @if (ImageURL is not null)
    {
        <div class="mb-1">
            <div class="text-center">
                <img class="img-fluid rounded-circle" src="@ImageURL" />
            </div>
        </div>
    }

    <div class="custom-input-file">
        <i class="bi bi-camera" style="font-size: 30px;">
        </i>        
    </div>
            <InputFile OnChange="OnChange" accept=".jpg,.jpeg,.png" />
</div>

<style>
    .custom-input-file {        
        
    }

        /* Estilo para ocultar el botón original del InputFile */
        .custom-input-file input[type="file"] {
            position: absolute;
            top: 0;
            right: 0;
            margin: 0;
            padding: 0;
            font-size: 20px;
            cursor: pointer;
            opacity: 0;
            filter: alpha(opacity=0);
            width: 50px;
            text-align: center;
        }
</style>

@code {
    [Parameter] public string Label { get; set; } = "Imagen";
    [Parameter] public string? ImageURL { get; set; }
    [Parameter] public EventCallback<string> ImageSelected { get; set; }
    [Parameter] public string MaxWithImg { get; set; } = "50";
    private string? imageBase64;

    async Task OnChange(InputFileChangeEventArgs e)
    {
        var imagenes = e.GetMultipleFiles();

        foreach (var imagen in imagenes)
        {
            var arrBytes = new byte[imagen.Size];
            await imagen.OpenReadStream().ReadAsync(arrBytes);
            imageBase64 = Convert.ToBase64String(arrBytes);
            ImageURL = null;
            await ImageSelected.InvokeAsync(imageBase64);
            StateHasChanged();
        }
    }
}